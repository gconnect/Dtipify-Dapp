/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace Donation {
  export type CreatorInfoStruct = {
    id: BigNumberish;
    username: string;
    ipfsHash: string;
    walletAddress: AddressLike;
    userbio: string;
    donationsReceived: BigNumberish;
    networkOption: string;
    supporters: BigNumberish;
    verified: boolean;
  };

  export type CreatorInfoStructOutput = [
    id: bigint,
    username: string,
    ipfsHash: string,
    walletAddress: string,
    userbio: string,
    donationsReceived: bigint,
    networkOption: string,
    supporters: bigint,
    verified: boolean
  ] & {
    id: bigint;
    username: string;
    ipfsHash: string;
    walletAddress: string;
    userbio: string;
    donationsReceived: bigint;
    networkOption: string;
    supporters: bigint;
    verified: boolean;
  };

  export type SupporterStruct = {
    from: AddressLike;
    timestamp: BigNumberish;
    message: string;
  };

  export type SupporterStructOutput = [
    from: string,
    timestamp: bigint,
    message: string
  ] & { from: string; timestamp: bigint; message: string };
}

export interface DonationInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "_owner"
      | "acceptOwnership"
      | "addVerifyBatch"
      | "checkUpkeep"
      | "contractBal"
      | "contractOwnerWithdraw"
      | "creatorCounter"
      | "featuredCreator"
      | "getCreatorBal"
      | "getCreatorCount"
      | "getCreatorInfo"
      | "getCreatorList"
      | "getCreatorObj"
      | "getFeaturedCreatorList"
      | "getRequestStatus"
      | "getSupportInfo"
      | "getSupporterList"
      | "getSupporterObj"
      | "getSupporters"
      | "lastRequestId"
      | "owner"
      | "performUpkeep"
      | "randomWordsNum"
      | "rawFulfillRandomWords"
      | "requestIds"
      | "requestRandomWords"
      | "s_requests"
      | "sendContractBalanceToOwner"
      | "sendTip"
      | "sendTipERC20"
      | "setCreatorDetail"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CreatorEvent"
      | "OwnershipTransferRequested"
      | "OwnershipTransferred"
      | "RequestFulfilled"
      | "RequestSent"
      | "SupporterEvent"
  ): EventFragment;

  encodeFunctionData(functionFragment: "_owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addVerifyBatch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkUpkeep",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "contractBal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contractOwnerWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "creatorCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "featuredCreator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCreatorBal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCreatorCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCreatorInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCreatorList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCreatorObj",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFeaturedCreatorList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRequestStatus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSupportInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSupporterList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSupporterObj",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSupporters",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastRequestId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "performUpkeep",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "randomWordsNum",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rawFulfillRandomWords",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "requestIds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "requestRandomWords",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "s_requests",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sendContractBalanceToOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sendTip",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sendTipERC20",
    values: [string, BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setCreatorDetail",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "_owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addVerifyBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkUpkeep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractBal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractOwnerWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creatorCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "featuredCreator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreatorBal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreatorCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreatorInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreatorList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreatorObj",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeaturedCreatorList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRequestStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSupportInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSupporterList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSupporterObj",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSupporters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastRequestId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "performUpkeep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "randomWordsNum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rawFulfillRandomWords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "requestIds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "requestRandomWords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "s_requests", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sendContractBalanceToOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sendTip", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sendTipERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCreatorDetail",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace CreatorEventEvent {
  export type InputTuple = [
    id: BigNumberish,
    username: string,
    walletAddress: AddressLike,
    ipfsHash: string,
    userbio: string,
    donationsReceived: BigNumberish,
    networkOption: string,
    supporters: BigNumberish,
    verified: boolean
  ];
  export type OutputTuple = [
    id: bigint,
    username: string,
    walletAddress: string,
    ipfsHash: string,
    userbio: string,
    donationsReceived: bigint,
    networkOption: string,
    supporters: bigint,
    verified: boolean
  ];
  export interface OutputObject {
    id: bigint;
    username: string;
    walletAddress: string;
    ipfsHash: string;
    userbio: string;
    donationsReceived: bigint;
    networkOption: string;
    supporters: bigint;
    verified: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferRequestedEvent {
  export type InputTuple = [from: AddressLike, to: AddressLike];
  export type OutputTuple = [from: string, to: string];
  export interface OutputObject {
    from: string;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [from: AddressLike, to: AddressLike];
  export type OutputTuple = [from: string, to: string];
  export interface OutputObject {
    from: string;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RequestFulfilledEvent {
  export type InputTuple = [
    requestId: BigNumberish,
    randomWords: BigNumberish[]
  ];
  export type OutputTuple = [requestId: bigint, randomWords: bigint[]];
  export interface OutputObject {
    requestId: bigint;
    randomWords: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RequestSentEvent {
  export type InputTuple = [requestId: BigNumberish, numWords: BigNumberish];
  export type OutputTuple = [requestId: bigint, numWords: bigint];
  export interface OutputObject {
    requestId: bigint;
    numWords: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SupporterEventEvent {
  export type InputTuple = [
    from: AddressLike,
    timestamp: BigNumberish,
    message: string
  ];
  export type OutputTuple = [from: string, timestamp: bigint, message: string];
  export interface OutputObject {
    from: string;
    timestamp: bigint;
    message: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Donation extends BaseContract {
  connect(runner?: ContractRunner | null): Donation;
  waitForDeployment(): Promise<this>;

  interface: DonationInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  _owner: TypedContractMethod<[], [string], "view">;

  acceptOwnership: TypedContractMethod<[], [void], "nonpayable">;

  addVerifyBatch: TypedContractMethod<[], [void], "nonpayable">;

  checkUpkeep: TypedContractMethod<
    [arg0: BytesLike],
    [[boolean, string] & { upkeepNeeded: boolean }],
    "view"
  >;

  contractBal: TypedContractMethod<[], [bigint], "view">;

  contractOwnerWithdraw: TypedContractMethod<[], [void], "nonpayable">;

  creatorCounter: TypedContractMethod<[], [bigint], "view">;

  featuredCreator: TypedContractMethod<
    [],
    [Donation.CreatorInfoStructOutput[]],
    "nonpayable"
  >;

  getCreatorBal: TypedContractMethod<[index: BigNumberish], [bigint], "view">;

  getCreatorCount: TypedContractMethod<[], [bigint], "view">;

  getCreatorInfo: TypedContractMethod<
    [index: BigNumberish],
    [
      [bigint, string, string, string, string, bigint, string, bigint] & {
        id: bigint;
      }
    ],
    "view"
  >;

  getCreatorList: TypedContractMethod<
    [],
    [Donation.CreatorInfoStructOutput[]],
    "view"
  >;

  getCreatorObj: TypedContractMethod<
    [_index: BigNumberish],
    [Donation.CreatorInfoStructOutput],
    "view"
  >;

  getFeaturedCreatorList: TypedContractMethod<
    [],
    [Donation.CreatorInfoStructOutput[]],
    "view"
  >;

  getRequestStatus: TypedContractMethod<
    [_requestId: BigNumberish],
    [[boolean, bigint[]] & { fulfilled: boolean; randomWords: bigint[] }],
    "view"
  >;

  getSupportInfo: TypedContractMethod<
    [index: BigNumberish],
    [
      [string, bigint, string] & {
        _from: string;
        _timestamp: bigint;
        _message: string;
      }
    ],
    "view"
  >;

  getSupporterList: TypedContractMethod<
    [],
    [Donation.SupporterStructOutput[]],
    "view"
  >;

  getSupporterObj: TypedContractMethod<
    [_index: BigNumberish],
    [Donation.SupporterStructOutput],
    "view"
  >;

  getSupporters: TypedContractMethod<[], [bigint], "view">;

  lastRequestId: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  performUpkeep: TypedContractMethod<[arg0: BytesLike], [void], "nonpayable">;

  randomWordsNum: TypedContractMethod<[], [bigint], "view">;

  rawFulfillRandomWords: TypedContractMethod<
    [requestId: BigNumberish, randomWords: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  requestIds: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  requestRandomWords: TypedContractMethod<[], [bigint], "nonpayable">;

  s_requests: TypedContractMethod<
    [arg0: BigNumberish],
    [[boolean, boolean] & { fulfilled: boolean; exists: boolean }],
    "view"
  >;

  sendContractBalanceToOwner: TypedContractMethod<[], [void], "nonpayable">;

  sendTip: TypedContractMethod<
    [_message: string, _index: BigNumberish],
    [void],
    "payable"
  >;

  sendTipERC20: TypedContractMethod<
    [
      _message: string,
      _index: BigNumberish,
      _amount: BigNumberish,
      _tokenAddress: AddressLike
    ],
    [void],
    "payable"
  >;

  setCreatorDetail: TypedContractMethod<
    [
      _username: string,
      _ipfsHash: string,
      _userbio: string,
      _networkOption: string
    ],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [to: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "_owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "acceptOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addVerifyBatch"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "checkUpkeep"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [[boolean, string] & { upkeepNeeded: boolean }],
    "view"
  >;
  getFunction(
    nameOrSignature: "contractBal"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "contractOwnerWithdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "creatorCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "featuredCreator"
  ): TypedContractMethod<
    [],
    [Donation.CreatorInfoStructOutput[]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getCreatorBal"
  ): TypedContractMethod<[index: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCreatorCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCreatorInfo"
  ): TypedContractMethod<
    [index: BigNumberish],
    [
      [bigint, string, string, string, string, bigint, string, bigint] & {
        id: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCreatorList"
  ): TypedContractMethod<[], [Donation.CreatorInfoStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getCreatorObj"
  ): TypedContractMethod<
    [_index: BigNumberish],
    [Donation.CreatorInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getFeaturedCreatorList"
  ): TypedContractMethod<[], [Donation.CreatorInfoStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getRequestStatus"
  ): TypedContractMethod<
    [_requestId: BigNumberish],
    [[boolean, bigint[]] & { fulfilled: boolean; randomWords: bigint[] }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSupportInfo"
  ): TypedContractMethod<
    [index: BigNumberish],
    [
      [string, bigint, string] & {
        _from: string;
        _timestamp: bigint;
        _message: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSupporterList"
  ): TypedContractMethod<[], [Donation.SupporterStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getSupporterObj"
  ): TypedContractMethod<
    [_index: BigNumberish],
    [Donation.SupporterStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSupporters"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "lastRequestId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "performUpkeep"
  ): TypedContractMethod<[arg0: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "randomWordsNum"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "rawFulfillRandomWords"
  ): TypedContractMethod<
    [requestId: BigNumberish, randomWords: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "requestIds"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "requestRandomWords"
  ): TypedContractMethod<[], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "s_requests"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [[boolean, boolean] & { fulfilled: boolean; exists: boolean }],
    "view"
  >;
  getFunction(
    nameOrSignature: "sendContractBalanceToOwner"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "sendTip"
  ): TypedContractMethod<
    [_message: string, _index: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "sendTipERC20"
  ): TypedContractMethod<
    [
      _message: string,
      _index: BigNumberish,
      _amount: BigNumberish,
      _tokenAddress: AddressLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "setCreatorDetail"
  ): TypedContractMethod<
    [
      _username: string,
      _ipfsHash: string,
      _userbio: string,
      _networkOption: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[to: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "CreatorEvent"
  ): TypedContractEvent<
    CreatorEventEvent.InputTuple,
    CreatorEventEvent.OutputTuple,
    CreatorEventEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferRequested"
  ): TypedContractEvent<
    OwnershipTransferRequestedEvent.InputTuple,
    OwnershipTransferRequestedEvent.OutputTuple,
    OwnershipTransferRequestedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "RequestFulfilled"
  ): TypedContractEvent<
    RequestFulfilledEvent.InputTuple,
    RequestFulfilledEvent.OutputTuple,
    RequestFulfilledEvent.OutputObject
  >;
  getEvent(
    key: "RequestSent"
  ): TypedContractEvent<
    RequestSentEvent.InputTuple,
    RequestSentEvent.OutputTuple,
    RequestSentEvent.OutputObject
  >;
  getEvent(
    key: "SupporterEvent"
  ): TypedContractEvent<
    SupporterEventEvent.InputTuple,
    SupporterEventEvent.OutputTuple,
    SupporterEventEvent.OutputObject
  >;

  filters: {
    "CreatorEvent(uint256,string,address,string,string,uint256,string,uint256,bool)": TypedContractEvent<
      CreatorEventEvent.InputTuple,
      CreatorEventEvent.OutputTuple,
      CreatorEventEvent.OutputObject
    >;
    CreatorEvent: TypedContractEvent<
      CreatorEventEvent.InputTuple,
      CreatorEventEvent.OutputTuple,
      CreatorEventEvent.OutputObject
    >;

    "OwnershipTransferRequested(address,address)": TypedContractEvent<
      OwnershipTransferRequestedEvent.InputTuple,
      OwnershipTransferRequestedEvent.OutputTuple,
      OwnershipTransferRequestedEvent.OutputObject
    >;
    OwnershipTransferRequested: TypedContractEvent<
      OwnershipTransferRequestedEvent.InputTuple,
      OwnershipTransferRequestedEvent.OutputTuple,
      OwnershipTransferRequestedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "RequestFulfilled(uint256,uint256[])": TypedContractEvent<
      RequestFulfilledEvent.InputTuple,
      RequestFulfilledEvent.OutputTuple,
      RequestFulfilledEvent.OutputObject
    >;
    RequestFulfilled: TypedContractEvent<
      RequestFulfilledEvent.InputTuple,
      RequestFulfilledEvent.OutputTuple,
      RequestFulfilledEvent.OutputObject
    >;

    "RequestSent(uint256,uint32)": TypedContractEvent<
      RequestSentEvent.InputTuple,
      RequestSentEvent.OutputTuple,
      RequestSentEvent.OutputObject
    >;
    RequestSent: TypedContractEvent<
      RequestSentEvent.InputTuple,
      RequestSentEvent.OutputTuple,
      RequestSentEvent.OutputObject
    >;

    "SupporterEvent(address,uint256,string)": TypedContractEvent<
      SupporterEventEvent.InputTuple,
      SupporterEventEvent.OutputTuple,
      SupporterEventEvent.OutputObject
    >;
    SupporterEvent: TypedContractEvent<
      SupporterEventEvent.InputTuple,
      SupporterEventEvent.OutputTuple,
      SupporterEventEvent.OutputObject
    >;
  };
}
